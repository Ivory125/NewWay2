quest stash begin
	state start begin -- Status when nothing is open
		when warehouse_keeper.chat.gameforge[LC()][10016] begin
			say_title(gameforge[LC()][10024])
			-- changed handling, after we get a new button to open the storeage directly
			say(gameforge[LC()][10025])
			wait()
			if pc.get_gold() < 500 then
				say_title(gameforge[LC()][10024])
				say(gameforge[LC()][10026])
			else
				local s = select(gameforge[LC()][4443], gameforge[LC()][4442])
				if s == 1 then
					pc.change_gold(-500)
					game.set_safebox_level(1)
					set_state(use)
					say_npc()
					say(gameforge[LC()][10027])
					say_reward(gameforge[LC()][10028])
					say(gameforge[LC()][10029])
				else
					say_title(gameforge[LC()][10024])
					say(gameforge[LC()][10030])
				end
			end
		end

		when warehouse_keeper.chat.gameforge[LC()][10019] begin
			if pc.getqf("open_item_storage_count") < 3 then
				say_npc()
				say(gameforge[LC()][10021])
				wait()
				say_npc()
				say_show_item(90013) -- icon of item
				say(gameforge[LC()][10022])
				wait()
				pc.setqf("open_item_storage_count", pc.getqf("open_item_storage_count") + 1)
			end

			setskin(NOWINDOW)
			game.open_mall()
		end
	end

	state use begin
		when warehouse_keeper.chat.gameforge[LC()][10031] begin
			if pc.getqf("open_count") < 3 then
				say_npc()
				say(gameforge[LC()][10017])
				wait()
				say_npc()
				say(gameforge[LC()][10018])
				wait()
				pc.setqf("open_count", pc.getqf("open_count") + 1)
			end

			setskin(NOWINDOW)
			game.open_safebox()
		end

		when warehouse_keeper.chat.gameforge[LC()][10019] begin
			if pc.getqf("open_item_storage_count") < 3 then
				say_npc()
				say(gameforge[LC()][10021])
				wait()
				say_npc()
				say_show_item(90013) -- icon of item
				say(gameforge[LC()][10022])
				wait()
				pc.setqf("open_item_storage_count", pc.getqf("open_item_storage_count") + 1)
			end

			setskin(NOWINDOW)
			game.open_mall()
		end

		when warehouse_keeper.chat.gameforge[LC()][4386] begin
			npc.open_shop()
			say_npc()
			say(gameforge[LC()][10020])
		end
	end -- end_of_state: use
end -- end_of_quest